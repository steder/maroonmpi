<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <link rel="StyleSheet" href="../style.css" type="text/css" media="screen" />
    <title>MMPI: Examples</title>
  </head>
  <body>
    <div id="header">
      <!--Logo-->
      <h1>MMPI Examples</h1>
      <hr />
    </div>
    <div id="sidebar">
      <div id="menu">
        <a href="../index.shtml">Home</a><br />
        <a href="../features.shtml">Features</a><br />
        <a href="../docs/">Documentation</a><br /> 
        <a href="../install.shtml">Installation</a><br />
        <a href="index.shtml">Examples</a><br />
        <a href="mailto:steder@gmail.com">Contact</a><br />
      </div>
    </div>
    <div id="content">
      <!--Body-->
      <h2>examples/</h2>
      <h3>Finding Maximums</h3>
      <p>This example uses one of the collective MPI functions, mpi_gather, to compute the 
        maximum value of a distributed dataset</p>
      <div id="code">
<html>
<head>
  <title>max2.py</title>
</head>
<body bgcolor="#ffffff" text="#000000">
<pre>
<font color="#444444">#!/usr/bin/python</font>
<font color="#008000">&quot;&quot;</font><font color="#008000">&quot;
Trivial Gather Example

One way to find the max of a large set of numbers by
divide and conquer.
&quot;</font><font color="#008000">&quot;&quot;</font>

<strong>import</strong> <font color="#2040a0">mpi</font>
<strong>import</strong> <font color="#2040a0">random</font>

<font color="#2040a0">problemlength</font> <font color="4444FF">=</font> <font color="#FF0000">1000</font>
    
<font color="#2040a0">def</font> <font color="#2040a0">main</font><font color="4444FF">(</font><font color="4444FF">)</font><font color="4444FF">:</font>
    <font color="#2040a0">myrank</font>, <font color="#2040a0">size</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">init</font><font color="4444FF">(</font><font color="4444FF">)</font>

    <font color="#444444"># split the problem in chunks</font>

    <strong>if</strong> <font color="#2040a0">problemlength</font> <font color="4444FF">%</font> <font color="#2040a0">size</font> <font color="4444FF">=</font><font color="4444FF">=</font> <font color="#FF0000">0</font><font color="4444FF">:</font>
        <font color="#2040a0">blocksize</font> <font color="4444FF">=</font> <font color="#2040a0">problemlength</font> / <font color="#2040a0">size</font>
    <strong>else</strong><font color="4444FF">:</font>
        <strong>print</strong> <font color="#008000">&quot;Sorry, I don't know how to split up the problem, aborting!&quot;</font>
        <font color="#2040a0">mpi</font>.<font color="#2040a0">finalize</font><font color="4444FF">(</font><font color="4444FF">)</font>
        
    <strong>if</strong> <font color="#2040a0">myrank</font> <font color="4444FF">=</font><font color="4444FF">=</font> <font color="#FF0000">0</font><font color="4444FF">:</font>
        <font color="#2040a0">data</font> <font color="4444FF">=</font> <font color="#2040a0">range</font><font color="4444FF">(</font><font color="#FF0000">1</font>,<font color="#2040a0">problemlength</font> <font color="4444FF">+</font> <font color="#FF0000">1</font><font color="4444FF">)</font>  <font color="#444444"># create a toy dataset...</font>
        <font color="#2040a0">random</font>.<font color="#2040a0">shuffle</font><font color="4444FF">(</font><font color="#2040a0">data</font><font color="4444FF">)</font>               <font color="#444444"># ...modifies data in place</font>

        <font color="#2040a0">mydata</font> <font color="4444FF">=</font> <font color="#2040a0">data</font><font color="4444FF">[</font><font color="#FF0000">0</font><font color="4444FF">:</font><font color="#2040a0">blocksize</font><font color="4444FF">]</font> <font color="#444444"># get some data for me...</font>
                                   <font color="#444444"># and communicate the rest to slaves</font>

        <strong>for</strong> <font color="#2040a0">host</font> <strong>in</strong> <font color="#2040a0">range</font><font color="4444FF">(</font><font color="#FF0000">1</font>,<font color="#2040a0">size</font><font color="4444FF">)</font><font color="4444FF">:</font>
            <font color="#2040a0">hisdata</font> <font color="4444FF">=</font> <font color="#2040a0">data</font><font color="4444FF">[</font><font color="#2040a0">blocksize</font><font color="4444FF">*</font><font color="#2040a0">host</font><font color="4444FF">:</font><font color="#2040a0">blocksize</font><font color="4444FF">*</font><font color="4444FF">(</font><font color="#2040a0">host</font><font color="4444FF">+</font><font color="#FF0000">1</font><font color="4444FF">)</font><font color="4444FF">]</font>
            <font color="#2040a0">mpi</font>.<font color="#2040a0">send</font><font color="4444FF">(</font><font color="#2040a0">hisdata</font>,<font color="#2040a0">blocksize</font>,<font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>,<font color="#2040a0">host</font>,<font color="#FF0000">0</font>,<font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font><font color="4444FF">)</font>
    <strong>else</strong><font color="4444FF">:</font>
        <font color="#2040a0">mydata</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">recv</font><font color="4444FF">(</font><font color="#2040a0">blocksize</font>,<font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>,<font color="#FF0000">0</font>,<font color="#FF0000">0</font>,<font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font><font color="4444FF">)</font>

    <font color="#2040a0">mymax</font> <font color="4444FF">=</font> <font color="#2040a0">max</font><font color="4444FF">(</font><font color="#2040a0">mydata</font><font color="4444FF">)</font>

    <font color="#2040a0">maximums</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">gather</font><font color="4444FF">(</font><font color="#2040a0">mymax</font>,<font color="#FF0000">1</font>,<font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>, <font color="#2040a0">size</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font><font color="4444FF">)</font>

    <strong>if</strong> <font color="#2040a0">myrank</font> <font color="4444FF">=</font><font color="4444FF">=</font> <font color="#FF0000">0</font><font color="4444FF">:</font>
        <font color="#2040a0">mymax</font> <font color="4444FF">=</font> <font color="#2040a0">max</font><font color="4444FF">(</font><font color="#2040a0">maximums</font><font color="4444FF">)</font>
        <strong>print</strong> <font color="#008000">&quot;The maximum value is:&quot;</font>, <font color="#2040a0">mymax</font>

    <font color="#2040a0">mpi</font>.<font color="#2040a0">finalize</font><font color="4444FF">(</font><font color="4444FF">)</font>            

<strong>if</strong> <font color="#2040a0">__name__</font><font color="4444FF">=</font><font color="4444FF">=</font><font color="#008000">&quot;__main__&quot;</font><font color="4444FF">:</font>
    <font color="#2040a0">main</font><font color="4444FF">(</font><font color="4444FF">)</font>


</pre>
<hr>
syntax highlighted by <a href="http://www.palfrader.org/code2html">Code2HTML</a>, v. 0.9.1
</body>
</html>
      </div>
      <h3>Pi via Monte Carlo</h3>
      <p>This example uses allreduce and a Monte Carlo method to compute Pi</p>
      <div id="code">
<html>
<head>
  <title>montecarlo.py</title>
</head>
<body bgcolor="#ffffff" text="#000000">
<pre>
<font color="#008000">&quot;&quot;</font><font color="#008000">&quot;
This example approxiamates PI using a monte carlo simulation.
&quot;</font><font color="#008000">&quot;&quot;</font>

<strong>import</strong> <font color="#2040a0">mpi</font>
<strong>import</strong> <font color="#2040a0">random</font>

<font color="#2040a0">def</font> <font color="#2040a0">computePi</font><font color="4444FF">(</font> <font color="#2040a0">size</font>, <font color="#2040a0">nsamples</font><font color="4444FF">)</font><font color="4444FF">:</font>
    <font color="#2040a0">oldpi</font>, <font color="#2040a0">pi</font>, <font color="#2040a0">mypi</font>,<font color="#2040a0">pisum</font> <font color="4444FF">=</font> <font color="#FF0000">0.0</font>,<font color="#FF0000">0.0</font>,<font color="#FF0000">0.0</font>,<font color="#FF0000">0.0</font>
    <font color="#2040a0">done</font> <font color="4444FF">=</font> <font color="#2040a0">False</font>
    
    <font color="#2040a0">inside</font> <font color="4444FF">=</font> <font color="#FF0000">0</font>
    <font color="#444444"># Monte Carlo bit</font>
    <strong>for</strong> <font color="#2040a0">i</font> <strong>in</strong> <font color="#2040a0">xrange</font><font color="4444FF">(</font><font color="#2040a0">nsamples</font><font color="4444FF">)</font><font color="4444FF">:</font>
        <font color="#2040a0">x</font> <font color="4444FF">=</font> <font color="#2040a0">random</font>.<font color="#2040a0">random</font><font color="4444FF">(</font><font color="4444FF">)</font>
        <font color="#2040a0">y</font> <font color="4444FF">=</font> <font color="#2040a0">random</font>.<font color="#2040a0">random</font><font color="4444FF">(</font><font color="4444FF">)</font>
        <strong>if</strong> <font color="4444FF">(</font><font color="4444FF">(</font><font color="#2040a0">x</font><font color="4444FF">*</font><font color="#2040a0">x</font><font color="4444FF">)</font><font color="4444FF">+</font><font color="4444FF">(</font><font color="#2040a0">y</font><font color="4444FF">*</font><font color="#2040a0">y</font><font color="4444FF">)</font><font color="4444FF">&lt;</font><font color="#FF0000">1</font><font color="4444FF">)</font><font color="4444FF">:</font>
            <font color="#2040a0">inside</font><font color="4444FF">+</font><font color="4444FF">=</font><font color="#FF0000">1</font>
    <font color="#444444"># </font>
    <font color="#2040a0">sum_inside</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">allreduce</font><font color="4444FF">(</font><font color="#2040a0">inside</font>, <font color="#FF0000">1</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_SUM</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font><font color="4444FF">)</font> 
    <font color="#444444"># The &quot;* 4&quot; is needed because we're computing the number of points inside</font>
    <font color="#444444"># a QUARTER unit circle.  So we're really computing (PI / 4).</font>
    <font color="#2040a0">pi</font> <font color="4444FF">=</font> <font color="4444FF">(</font> <font color="#2040a0">sum_inside</font><font color="4444FF">[</font><font color="#FF0000">0</font><font color="4444FF">]</font> / <font color="4444FF">(</font><font color="#2040a0">nsamples</font><font color="4444FF">*</font><font color="#2040a0">size</font><font color="4444FF">*</font><font color="#FF0000">1.0</font><font color="4444FF">)</font> <font color="4444FF">)</font> <font color="4444FF">*</font> <font color="#FF0000">4</font>
    <strong>return</strong> <font color="#2040a0">pi</font>

<strong>if</strong> <font color="#2040a0">__name__</font><font color="4444FF">=</font><font color="4444FF">=</font><font color="#008000">&quot;__main__&quot;</font><font color="4444FF">:</font>
    <font color="#2040a0">rank</font>, <font color="#2040a0">size</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">init</font><font color="4444FF">(</font><font color="4444FF">)</font>
    <font color="#444444"># More sample points should make a more accurate value for pi.</font>
    <font color="#2040a0">pi</font> <font color="4444FF">=</font> <font color="#2040a0">computePi</font><font color="4444FF">(</font> <font color="#2040a0">size</font>, <font color="#FF0000">10000</font> <font color="4444FF">)</font>
    <strong>if</strong><font color="4444FF">(</font><font color="#2040a0">rank</font><font color="4444FF">=</font><font color="4444FF">=</font><font color="#FF0000">0</font><font color="4444FF">)</font><font color="4444FF">:</font>
        <strong>print</strong> <font color="#008000">&quot;Computed value of pi on&quot;</font>,<font color="#2040a0">size</font>,<font color="#008000">&quot;processors is&quot;</font>,<font color="#2040a0">pi</font>
    <font color="#2040a0">mpi</font>.<font color="#2040a0">finalize</font><font color="4444FF">(</font><font color="4444FF">)</font>


</pre>
<hr>
syntax highlighted by <a href="http://www.palfrader.org/code2html">Code2HTML</a>, v. 0.9.1
</body>
</html>        

      </div>
      <h3>Asynchronous I/O</h3>
      <p>This example illustrates how asynchronous (or non-blocking) I/O can be used within MMPI</p>
      <div id="code">
        
<html>
<head>
  <title>irecv.py</title>
</head>
<body bgcolor="#ffffff" text="#000000">
<pre>
<strong>import</strong> <font color="#2040a0">sys</font>
<strong>import</strong> <font color="#2040a0">Numeric</font>
<strong>import</strong> <font color="#2040a0">mpi</font>

<strong>try</strong><font color="4444FF">:</font>
    <font color="#2040a0">rank</font>,<font color="#2040a0">size</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">init</font><font color="4444FF">(</font> <font color="#2040a0">len</font><font color="4444FF">(</font><font color="#2040a0">sys</font>.<font color="#2040a0">argv</font><font color="4444FF">)</font>, <font color="#2040a0">sys</font>.<font color="#2040a0">argv</font> <font color="4444FF">)</font>

    <font color="#2040a0">request</font>,<font color="#2040a0">buffer</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">irecv</font><font color="4444FF">(</font> <font color="#FF0000">10</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>, <font color="#FF0000">0</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>

    <strong>print</strong> <font color="#008000">&quot;Request #: %s&quot;</font><font color="4444FF">%</font><font color="4444FF">(</font><font color="#2040a0">request</font><font color="4444FF">)</font>
    <strong>print</strong> <font color="#008000">&quot;buffer: %s&quot;</font><font color="4444FF">%</font><font color="4444FF">(</font><font color="#2040a0">buffer</font><font color="4444FF">)</font>

    <font color="#2040a0">A</font> <font color="4444FF">=</font> <font color="#2040a0">Numeric</font>.<font color="#2040a0">array</font><font color="4444FF">(</font><font color="4444FF">[</font><font color="#FF0000">1</font>,<font color="#FF0000">2</font>,<font color="#FF0000">3</font>,<font color="#FF0000">4</font>,<font color="#FF0000">5</font>,<font color="#FF0000">6</font>,<font color="#FF0000">7</font>,<font color="#FF0000">8</font>,<font color="#FF0000">9</font>,<font color="#FF0000">10</font><font color="4444FF">]</font>,<font color="#2040a0">Numeric</font>.<font color="#2040a0">Int32</font><font color="4444FF">)</font>
    <font color="#2040a0">send_request</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">isend</font><font color="4444FF">(</font> <font color="#2040a0">A</font>, <font color="#FF0000">10</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>, <font color="#FF0000">0</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>
    <strong>print</strong> <font color="#008000">&quot;Sending Request: %s&quot;</font><font color="4444FF">%</font><font color="4444FF">(</font><font color="#2040a0">send_request</font><font color="4444FF">)</font>
    <font color="#2040a0">status</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">wait</font><font color="4444FF">(</font> <font color="#2040a0">request</font> <font color="4444FF">)</font>
    <font color="#2040a0">status</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">wait</font><font color="4444FF">(</font> <font color="#2040a0">send_request</font> <font color="4444FF">)</font>
    <strong>print</strong> <font color="#008000">&quot;buffer(after send): %s&quot;</font><font color="4444FF">%</font><font color="4444FF">(</font><font color="#2040a0">buffer</font><font color="4444FF">)</font>
    <strong>print</strong> <font color="#008000">&quot;status:&quot;</font>,<font color="#2040a0">status</font>
    <font color="#2040a0">mpi</font>.<font color="#2040a0">finalize</font><font color="4444FF">(</font><font color="4444FF">)</font>
<strong>except</strong><font color="4444FF">:</font>
    <font color="#2040a0">mpi</font>.<font color="#2040a0">finalize</font><font color="4444FF">(</font><font color="4444FF">)</font>
    <strong>raise</strong>

</pre>
<hr>
syntax highlighted by <a href="http://www.palfrader.org/code2html">Code2HTML</a>, v. 0.9.1
</body>
</html>


      </div>
      <h3>Perverse way to compute multiples of 7</h3>
      <div id="code">

<html>
<head>
  <title>reduce.py</title>
</head>
<body bgcolor="#ffffff" text="#000000">
<pre>
<strong>import</strong> <font color="#2040a0">sys</font>,<font color="#2040a0">mpi</font>
<font color="#2040a0">rank</font>,<font color="#2040a0">size</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">init</font><font color="4444FF">(</font><font color="#2040a0">len</font><font color="4444FF">(</font><font color="#2040a0">sys</font>.<font color="#2040a0">argv</font><font color="4444FF">)</font>,<font color="#2040a0">sys</font>.<font color="#2040a0">argv</font><font color="4444FF">)</font>
<font color="#2040a0">sigma</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">reduce</font><font color="4444FF">(</font> <font color="#FF0000">7</font>, <font color="#FF0000">1</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_SUM</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>
<strong>print</strong> <font color="#008000">&quot;Sum:&quot;</font>,<font color="#2040a0">sigma</font> 
<font color="#2040a0">mpi</font>.<font color="#2040a0">finalize</font><font color="4444FF">(</font><font color="4444FF">)</font>

</pre>
<hr>
syntax highlighted by <a href="http://www.palfrader.org/code2html">Code2HTML</a>, v. 0.9.1
</body>
</html>


      </div>
      <h3>Sending Arbitrary Python Objects</h3>
      <p>Unlike that last example, this one is actually quite cool.  By serializing a Python object you can send and recv it as an array of type MPI_CHAR, and then reassemble it on the other side.  It's not pretty at the moment but i'm hoping to make support for arbitrary objects nicer.  Arbitrary objects are just not a priority right now.  However, if you absolutely must use MPI to send arbitrary Python objects you can!</p>
      <div id="code">

<html>
<head>
  <title>serialize.py</title>
</head>
<body bgcolor="#ffffff" text="#000000">
<pre>
<font color="#008000">&quot;&quot;</font><font color="#008000">&quot;
An example of how to send and receive arbitrary python objects, such as dictionaries.
&quot;</font><font color="#008000">&quot;&quot;</font>

<strong>import</strong> <font color="#2040a0">pickle</font>
<strong>import</strong> <font color="#2040a0">mpi</font>

<font color="#2040a0">somedata</font> <font color="4444FF">=</font> <font color="4444FF">[</font><font color="#008000">&quot;hello&quot;</font>,<font color="#008000">&quot;world&quot;</font>,<font color="#008000">&quot;!&quot;</font><font color="4444FF">]</font>
<font color="#2040a0">somedict</font> <font color="4444FF">=</font> <font color="4444FF"><strong>{</strong></font><font color="4444FF"><strong>}</strong></font>

<font color="#2040a0">i</font> <font color="4444FF">=</font> <font color="#FF0000">0</font>
<strong>for</strong> <font color="#2040a0">item</font> <strong>in</strong> <font color="#2040a0">somedata</font><font color="4444FF">:</font>
    <font color="#2040a0">somedict</font><font color="4444FF">[</font><font color="#2040a0">i</font><font color="4444FF">]</font> <font color="4444FF">=</font> <font color="#2040a0">item</font>
    <font color="#2040a0">i</font> <font color="4444FF">+</font><font color="4444FF">=</font> <font color="#FF0000">1</font>


<font color="#2040a0">def</font> <font color="#2040a0">main</font><font color="4444FF">(</font><font color="4444FF">)</font><font color="4444FF">:</font>
    <font color="#2040a0">rank</font>,<font color="#2040a0">size</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">init</font><font color="4444FF">(</font><font color="4444FF">)</font>
    
    <font color="#2040a0">serial_dict</font> <font color="4444FF">=</font> <font color="#2040a0">pickle</font>.<font color="#2040a0">dumps</font><font color="4444FF">(</font><font color="#2040a0">somedict</font><font color="4444FF">)</font>

    <font color="#2040a0">mpi</font>.<font color="#2040a0">isend</font><font color="4444FF">(</font> <font color="#2040a0">serial_dict</font>, <font color="#2040a0">len</font><font color="4444FF">(</font><font color="#2040a0">serial_dict</font><font color="4444FF">)</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_CHAR</font>, <font color="#FF0000">0</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>

    <font color="#2040a0">new_serial_dict</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">recv</font><font color="4444FF">(</font> <font color="#2040a0">len</font><font color="4444FF">(</font> <font color="#2040a0">serial_dict</font><font color="4444FF">)</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_CHAR</font>, <font color="#FF0000">0</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>
    <strong>print</strong> <font color="#2040a0">new_serial_dict</font>

    <font color="#2040a0">mpi</font>.<font color="#2040a0">finalize</font><font color="4444FF">(</font><font color="4444FF">)</font>

    <font color="#2040a0">newdict</font> <font color="4444FF">=</font> <font color="#2040a0">pickle</font>.<font color="#2040a0">loads</font><font color="4444FF">(</font> <font color="#2040a0">new_serial_dict</font> <font color="4444FF">)</font>
    <strong>print</strong> <font color="#2040a0">newdict</font>
    <strong>return</strong>

<strong>if</strong> <font color="#2040a0">__name__</font><font color="4444FF">=</font><font color="4444FF">=</font><font color="#008000">&quot;__main__&quot;</font><font color="4444FF">:</font>
    <font color="#2040a0">main</font><font color="4444FF">(</font><font color="4444FF">)</font>

</pre>
<hr>
syntax highlighted by <a href="http://www.palfrader.org/code2html">Code2HTML</a>, v. 0.9.1
</body>
</html>


      </div>
      <h2>bin/</h2>
      <h3>A Parallel Python Interpreter</h3>
      <p>The following is a very simple skeleton that will interactively
      prompt you for commands (just like the normal Python interpreter)
      but execute those commands on a number of parallel instances of the
      interpreter.</p>
      <div id="code">
<html>
<head>
  <title>parallel.py</title>
</head>
<body bgcolor="#ffffff" text="#000000">
<pre>
<font color="#008000">&quot;&quot;</font><font color="#008000">&quot;
The goal is to illustrate how you might create an interactive
parallel interpreter with this MPI package.

This interpreter is a simple extension of the InteractiveConsole
class provided by Python's standard library (in the 'code' module).
&quot;</font><font color="#008000">&quot;&quot;</font>
<font color="#444444"># Standard Modules</font>
<strong>import</strong> <font color="#2040a0">sys</font>,<font color="#2040a0">code</font>
<font color="#444444"># My Modules</font>
<strong>import</strong> <font color="#2040a0">mpi</font>

<strong>class</strong> <font color="#2040a0">ParallelConsole</font><font color="4444FF">(</font> <font color="#2040a0">code</font>.<font color="#2040a0">InteractiveConsole</font> <font color="4444FF">)</font><font color="4444FF">:</font>
<strong>   <font color="ff0000"> def</font><font color="ff0000"> __init__</font><font color="2040a0">(self, locals=None, filename=&quot;&lt;console&gt;&quot;)</font>:
</strong>        <font color="#008000">&quot;&quot;</font><font color="#008000">&quot;Constructor.
        
        The optional locals argument will be passed to the
        InteractiveInterpreter base class.

        The optional filename argument should specify the (file)name
        of the input stream; it will show up in tracebacks.

        &quot;</font><font color="#008000">&quot;&quot;</font>
        <font color="#2040a0">code</font>.<font color="#2040a0">InteractiveConsole</font>.<font color="#2040a0">__init__</font><font color="4444FF">(</font><font color="#2040a0">self</font>, <font color="#2040a0">locals</font>,<font color="#2040a0">filename</font><font color="4444FF">)</font>
        <font color="#2040a0">self</font>.<font color="#2040a0">rank</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">comm_rank</font><font color="4444FF">(</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>
        <font color="#2040a0">self</font>.<font color="#2040a0">size</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">comm_size</font><font color="4444FF">(</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>
        <strong>return</strong>

<strong>   <font color="ff0000"> def</font><font color="ff0000"> raw_input</font><font color="2040a0">(self, prompt=&quot;&quot;)</font>:
</strong>        <font color="#008000">&quot;&quot;</font><font color="#008000">&quot;
        On the master node:
           1). Write a prompt and read a line.
           2). Broadcast the Line or Terminate
           3). Broadcast the Line
               a).  First, get the length of the line and broadcast it
               b).  Broadcast the line data itself
           4). Terminate
               a).  If the user types the control sequence to exit
                      EOFError is raised.
               b).  Catch EOFError and broadcast length, this time broadcasting negative
               c).  All nodes check for length &lt; 0 and raise an EOFError.
        &quot;</font><font color="#008000">&quot;&quot;</font>
        <strong>if</strong><font color="4444FF">(</font> <font color="#2040a0">self</font>.<font color="#2040a0">rank</font> <font color="4444FF">=</font><font color="4444FF">=</font> <font color="#FF0000">0</font> <font color="4444FF">)</font><font color="4444FF">:</font>
            <strong>try</strong><font color="4444FF">:</font>
                <font color="#2040a0">data</font> <font color="4444FF">=</font> <font color="#2040a0">raw_input</font><font color="4444FF">(</font><font color="#2040a0">prompt</font><font color="4444FF">)</font>
            <strong>except</strong> <font color="#2040a0">EOFError</font><font color="4444FF">:</font>
                <font color="#2040a0">length</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">bcast</font><font color="4444FF">(</font> <font color="4444FF">-</font><font color="#FF0000">1</font>, <font color="#FF0000">1</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>
                <font color="#2040a0">self</font>.<font color="#2040a0">write</font><font color="4444FF">(</font><font color="#008000">&quot;<font color="#77dd77">\n</font>&quot;</font><font color="4444FF">)</font>
                <strong>raise</strong>
            <font color="#2040a0">length</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">bcast</font><font color="4444FF">(</font> <font color="#2040a0">len</font><font color="4444FF">(</font><font color="#2040a0">data</font><font color="4444FF">)</font>, <font color="#FF0000">1</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>
            <font color="#2040a0">data</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">bcast</font><font color="4444FF">(</font><font color="#2040a0">data</font>,<font color="#2040a0">length</font><font color="4444FF">[</font><font color="#FF0000">0</font><font color="4444FF">]</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_CHAR</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>
        <strong>else</strong><font color="4444FF">:</font>
            <font color="#2040a0">length</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">bcast</font><font color="4444FF">(</font> <font color="#FF0000">0</font>, <font color="#FF0000">1</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_INT</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>
            <strong>if</strong> <font color="4444FF">(</font><font color="#2040a0">length</font><font color="4444FF">[</font><font color="#FF0000">0</font><font color="4444FF">]</font> <font color="4444FF">&lt;</font> <font color="#FF0000">0</font><font color="4444FF">)</font><font color="4444FF">:</font>
                <strong>raise</strong> <font color="#2040a0">EOFError</font>
            <font color="#2040a0">data</font> <font color="4444FF">=</font> <font color="#2040a0">mpi</font>.<font color="#2040a0">bcast</font><font color="4444FF">(</font><font color="#008000">&quot;&quot;</font>,<font color="#2040a0">length</font><font color="4444FF">[</font><font color="#FF0000">0</font><font color="4444FF">]</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_CHAR</font>, <font color="#FF0000">0</font>, <font color="#2040a0">mpi</font>.<font color="#2040a0">MPI_COMM_WORLD</font> <font color="4444FF">)</font>
        <font color="#2040a0">data</font> <font color="4444FF">=</font> <font color="#008000">&quot;&quot;</font>.<font color="#2040a0">join</font><font color="4444FF">(</font><font color="#2040a0">data</font><font color="4444FF">)</font>
        <strong>return</strong> <font color="#2040a0">data</font>

<strong>   <font color="ff0000"> def</font><font color="ff0000"> interact</font><font color="2040a0">(self, banner=None)</font>:
</strong>        <font color="#008000">&quot;&quot;</font><font color="#008000">&quot;Closely emulate the interactive Python console.

        The optional banner argument specify the banner to print
        before the first interaction; by default it prints a banner
        similar to the one printed by the real Python interpreter,
        followed by the current class name in parentheses (so as not
        to confuse this with the real interpreter -- since it's so
        close!).

        &quot;</font><font color="#008000">&quot;&quot;</font>
        <strong>try</strong><font color="4444FF">:</font>
            <font color="#2040a0">sys</font>.<font color="#2040a0">ps1</font>
        <strong>except</strong> <font color="#2040a0">AttributeError</font><font color="4444FF">:</font>
            <font color="#2040a0">sys</font>.<font color="#2040a0">ps1</font> <font color="4444FF">=</font> <font color="#008000">&quot;&gt;&gt;&gt; &quot;</font>
        <strong>try</strong><font color="4444FF">:</font>
            <font color="#2040a0">sys</font>.<font color="#2040a0">ps2</font>
        <strong>except</strong> <font color="#2040a0">AttributeError</font><font color="4444FF">:</font>
            <font color="#2040a0">sys</font>.<font color="#2040a0">ps2</font> <font color="4444FF">=</font> <font color="#008000">&quot;... &quot;</font>
        <font color="#2040a0">cprt</font> <font color="4444FF">=</font> <font color="#008000">'Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.'</font>
        <strong>if</strong><font color="4444FF">(</font> <font color="#2040a0">self</font>.<font color="#2040a0">rank</font> <font color="4444FF">=</font><font color="4444FF">=</font> <font color="#FF0000">0</font> <font color="4444FF">)</font><font color="4444FF">:</font>
            <strong>if</strong> <font color="#2040a0">banner</font> <strong>is</strong> <font color="#2040a0">None</font><font color="4444FF">:</font>
                <font color="#2040a0">self</font>.<font color="#2040a0">write</font><font color="4444FF">(</font><font color="#008000">&quot;Python %s on %s<font color="#77dd77">\n</font>%s<font color="#77dd77">\n</font>(%s)<font color="#77dd77">\n</font>&quot;</font> <font color="4444FF">%</font>
                           <font color="4444FF">(</font><font color="#2040a0">sys</font>.<font color="#2040a0">version</font>, <font color="#2040a0">sys</font>.<font color="#2040a0">platform</font>, <font color="#2040a0">cprt</font>,
                            <font color="#2040a0">self</font>.<font color="#2040a0">__class__</font>.<font color="#2040a0">__name__</font><font color="4444FF">)</font><font color="4444FF">)</font>
            <strong>else</strong><font color="4444FF">:</font>
                <font color="#2040a0">self</font>.<font color="#2040a0">write</font><font color="4444FF">(</font><font color="#008000">&quot;%s<font color="#77dd77">\n</font>&quot;</font> <font color="4444FF">%</font> <font color="#2040a0">str</font><font color="4444FF">(</font><font color="#2040a0">banner</font><font color="4444FF">)</font><font color="4444FF">)</font>
        <strong>else</strong><font color="4444FF">:</font>
            <strong>pass</strong>
        <font color="#2040a0">more</font> <font color="4444FF">=</font> <font color="#FF0000">0</font>
        <strong>while</strong> <font color="#FF0000">1</font><font color="4444FF">:</font>
            <strong>try</strong><font color="4444FF">:</font>
                <strong>if</strong> <font color="#2040a0">more</font><font color="4444FF">:</font>
                    <font color="#2040a0">prompt</font> <font color="4444FF">=</font> <font color="#2040a0">sys</font>.<font color="#2040a0">ps2</font>
                <strong>else</strong><font color="4444FF">:</font>
                    <font color="#2040a0">prompt</font> <font color="4444FF">=</font> <font color="#2040a0">sys</font>.<font color="#2040a0">ps1</font>
                <strong>try</strong><font color="4444FF">:</font>
                    <font color="#2040a0">line</font> <font color="4444FF">=</font> <font color="#2040a0">self</font>.<font color="#2040a0">raw_input</font><font color="4444FF">(</font><font color="#2040a0">prompt</font><font color="4444FF">)</font>
                <strong>except</strong> <font color="#2040a0">EOFError</font><font color="4444FF">:</font>
                    <strong>break</strong>
                <strong>else</strong><font color="4444FF">:</font>
                    <font color="#2040a0">more</font> <font color="4444FF">=</font> <font color="#2040a0">self</font>.<font color="#2040a0">push</font><font color="4444FF">(</font><font color="#2040a0">line</font><font color="4444FF">)</font>
            <strong>except</strong> <font color="#2040a0">KeyboardInterrupt</font><font color="4444FF">:</font>
                <font color="#2040a0">self</font>.<font color="#2040a0">write</font><font color="4444FF">(</font><font color="#008000">&quot;<font color="#77dd77">\n</font>KeyboardInterrupt<font color="#77dd77">\n</font>&quot;</font><font color="4444FF">)</font>
                <font color="#2040a0">self</font>.<font color="#2040a0">resetbuffer</font><font color="4444FF">(</font><font color="4444FF">)</font>
                <font color="#2040a0">more</font> <font color="4444FF">=</font> <font color="#FF0000">0</font>
        
<strong>if</strong> <font color="#2040a0">__name__</font><font color="4444FF">=</font><font color="4444FF">=</font><font color="#008000">&quot;__main__&quot;</font><font color="4444FF">:</font>
    <strong>try</strong><font color="4444FF">:</font>
        <font color="#2040a0">mpi</font>.<font color="#2040a0">init</font><font color="4444FF">(</font><font color="4444FF">)</font>
        <font color="#2040a0">console</font> <font color="4444FF">=</font> <font color="#2040a0">ParallelConsole</font><font color="4444FF">(</font> <font color="4444FF">)</font>
        <font color="#2040a0">console</font>.<font color="#2040a0">interact</font><font color="4444FF">(</font><font color="4444FF">)</font>
        <font color="#2040a0">mpi</font>.<font color="#2040a0">finalize</font><font color="4444FF">(</font><font color="4444FF">)</font>
    <strong>except</strong><font color="4444FF">:</font>
        <font color="#2040a0">mpi</font>.<font color="#2040a0">finalize</font><font color="4444FF">(</font><font color="4444FF">)</font>
        <strong>raise</strong>

</pre>
<hr>
syntax highlighted by <a href="http://www.palfrader.org/code2html">Code2HTML</a>, v. 0.9.1
</body>
</html>

      </div>
    </div>
    <div id="footer">
      <hr/>
      &copy; m. steder (2006)
    </div>
  </body>
</html>
