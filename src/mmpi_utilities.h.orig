/*MMPI - MPI Interface for Python
Copyright (C) 2005 Michael Steder(steder@gmail.com)

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
/*
  mmpi_utilities.h:

  This header defines functions needed in several other C files.
*/

#ifndef MPIMODULE_UTILITIES_H
#define MPIMODULE_UTILITIES_H

#include "Python.h"
#include "arrayobject.h"

#include "mmpi_globals.h"

/* This function translates an MPI Type into a Python Type. */
int getPythonType(long mpitype)
{
  /* Please take note of the shortcutting here when reorganizing 
     For instance, MPI_LONG and MPI_UNSIGNED_LONG both
     drop through to the same return PyArray_LONG; 
   */
    switch (mpitype) {
    case((long)MPI_BYTE):
      return PyArray_SBYTE;/* Or PyArray_UBYTE (signed / unsigned) */
    case ((long)MPI_CHAR):
      return PyArray_CHAR;
    case((long)MPI_SHORT):
      return PyArray_SHORT;
    case ((long) MPI_INT):
      return PyArray_INT;
    case((long)MPI_LONG):
      return PyArray_LONG;
    case ((long) MPI_FLOAT):
      return PyArray_FLOAT;
    case ((long) MPI_DOUBLE):
      return PyArray_DOUBLE;
    case ((long) MPI_PACKED):
      /* this falls through to default */
    default:
      {
#warning "TODO: the default case in getPythonType should probably throw an exception (TypeError,ValueError) or something rather then just print a warning.\n"
      /* Set an exception handler and return ?? */
      printf("*** Unknown MPI Type -- (Assuming MPI_INT)! ***\n");
      return PyArray_INT;
      }
    }
}

#endif
